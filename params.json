{
  "name": "Vagrant-python-django",
  "tagline": "A Vagrantfile VM to get you started with contained Python/Django environments quickly.",
  "body": "# Vagrant-Python-Django VM\r\n\r\nA Vagrantfile utilizing Ubuntu 14.04/Trusty to get you started with self-contained Python/Django projects quickly via VirtualEnv.\r\nCreate contained environments within the VM via `init_python_env`\r\n\r\n## Installation\r\n#### Prerequisites\r\n  - install [VirtualBox](https://www.virtualbox.org/wiki/Downloads)(_recommended_) or VMWare for [MAC](https://my.vmware.com/web/vmware/info?slug=desktop_end_user_computing/vmware_fusion/8_0), [Windows](http://www.vmware.com/products/workstation.html) or [Linux](http://www.vmware.com/products/workstation-for-linux.html) on your host machine.\r\n  - install [Vagrant](https://www.vagrantup.com/downloads.html) on your host machine.\r\n\r\n#### Configure Virtual Machine(VM) Settings\r\n  edit `config.yml` to setup network, CPU and folder-sync configurations.\r\n\r\n#### Logging Into Your VM\r\n  - `vagrant up` to setup and initialize the VM. ( only the first time you run `vagrant up` will take long 5-10 mins )\r\n  - After the VM is initialized, run `vagrant ssh`\r\n  - change the current directory to your projects root by typing `cd $WORKON_HOME`\r\n\r\n#### Create a Contained Python Environment\r\n  `init_python_env`. Installing Django is optional.\r\n\r\n#### Setup PgAdmin Web interface (phpPgAdmin)\r\n`setup_phppgadmin`\r\n\r\n#### Setting Up a New Database For A Django Project \r\n  `manage_django_db`. **Switch to a Django Project Folder before running**. This will create a new user, alter their role, create a new database, and assign them to a DB. If you just want to assign roles and not create new users/DBs, that works too. Running this command will also automatically update the django `settings.py` file for your project. ** CURRENTLY ONLY SUPPORTS POSTGRESQL ** More DBMS will be added in the future.\r\n\r\n## Notes to User:\r\n  - The default settings will run Django on port 80\r\n  - To change the port Django runs on just run: `python manage.py runserver [::]:YOUR_NEW_PORT` in a Django project and that port will be accessible via the `hostname` entered in the `config.yml` file.\r\n\r\n#### PostgreSQL Notes\r\n- Defaults to latest stable version PostgreSQL\r\n- Apache is required for phpPgAdmin web interface.\r\n- To change the port(s) Apache runs on, run the command `update_apache_ports`\r\n\r\n## Usage\r\n  - VirtualEnv is _not_ a VM container, it is simply to create self-contained python environments. Think of it as a sandbox, not a full fledged VM. Plus, we already have the VM!\r\n  - `cd` into the synced_folder and run the command `init_python_env` to create a new Python Environment so projects/packages are contained. **All python environments will be initialized in the synced_folder (`/vagrant/www/` by default).**\r\n  - Be aware that self-contained Python Environments does ***NOT*** mean self-contained Database Environments. Future releases may take this into account through porting.\r\n  - Run `python -V` and `django-admin --version` to make sure everything checked out.\r\n  - run `deactivate` to exit virtualenv environment or `workon [PROJECT_NAME]` to activate it. Alternatively, whenever you navigate into a project folder, the virtual environment will become activated.\r\n  - the PS1 prompt is set up to let you know which virtualenv you are working with and what branch you are actively on when a git repo is there.\r\n  - If you are switching between many Python Environments and/or Django Projects, be absolutely sure that your active environment( which is assigned in the PS1) is the one you want to install packages and modules on.\r\n  - do not change Django Project folder names, as it may cause issues. Python Environments in the root directory may be renamed if needed though.\r\n  - although these projects are placed in the webserver's root(for folder sync reasons), do not upload any of your Python files into the web document root in _production environments_, for security's sake.\r\n\r\n## TO DO\r\n##### Smaller To Dos\r\n  - Let user define PostgreSQL port when running `manage_django_db`. Edit `sed` `/etc/postgresql/9.3/main/postgresql.conf` port=5432. Might want to create a sepatate shell file or method, to scan `/etc/postgresql/` for versions and ask which to update... `sed` return change before confirm and restart service.\r\n  - reconfigure `configure_md5_login` in `manage_django_db_postgres` shouldn't be automatically run, only once or manually.\r\n  - in `manage_django_db_postgres` when installing psycopg2, need to first automatically install the _correct_ version of the `python-dev` package. Note to self: grab `which python` and loop through versions, popping off version number until match is met. Use method `check_package`\r\n  - when selecting a DBMS for project, also accept a DBMS version number for each. eg: `\"Select which engine you'd like to use: 1,2,4,5,6\"; user selects #1 postgresql and then prompt them for version to install; create warnings if DMBS already installed.`\r\n  - don't force any ports for a DBMS'. Let user configure any ports in `config.yml`\r\n    - update PostgreSQL\r\n\r\n##### Bigger To Dos\r\n  - create a utility that installs necessary dependencies to run gulp/grunt tasks for Django Projects.\r\n    - also create task-runner templates for projects... `init_taskrunner` >>> `gulp`...running. Maybe best to package it all up into one command so no separate install takes place; just run prior checks when `init_taskrunner` or similar. Setup BrowserSync, PostCSS, Autoprefixer, SourceMaps, Uglify, etc.  \r\n\r\n## Useful Commands\r\n#### General VM CPU Info\r\n  - view CPU firmware and memory: `sudo lshw -class memory`\r\n  - view CPU info: `lscpu`\r\n  - check current OS info: `lsb_release -a`\r\n\r\n#### Start a Django Project\r\n  - start a django project: `django-admin startproject [PROJECT_NAME]`\r\n  - start a django app for the project: `python manage.py startapp [APP_NAME]`\r\n  - start django server: `python manage.py runserver [::]:80` or `startserver`\r\n\r\n#### Sharing the Project\r\n  - navigate to a project folder so that it is active.\r\n  - run `pip freeze > requirements.txt` to export a list of installed packages for the environment, _including_ the VM packages.\r\n  - if you'd to only export the _local_ packages within the virtualenv environment, use the `-l` flag. `pip freeze -l > requirements.txt`\r\n  - to install these packages within a different environment: `pip install -r requirements.txt`\r\n  - run `vagrant share` on the HOST machine to share your project(s) with the world. For development and Q/A only. Be careful with sensitive data before proceeding. You can even use your own domain to share projects: http://projectname.yourwebsite.com\r\n\r\n## Issues\r\n  - Be sure that Python and Django versions are compatible together when installing both at the same time.\r\n  - when running `startserver`,or `python manage.py runserver [::]:80`, **if you receive and error related to psycopg2**, make sure you install the python-dev for your **active** version of python, e.g `pytho3.4-dev`. After running `sudo apt-get install pythonX.X-dev`, install the psycopg2 python module via pip by making sure you virtualenv is active and entering `pip install psycopg2`.\r\n\r\n  Please [open an issue](https://github.com/ccurtin/vagrant-python-django/issues/new) for support.\r\n\r\n## Contributing\r\n\r\nPlease contribute using [Github Flow](https://guides.github.com/introduction/flow/). Create a branch, add commits, and [open a pull request](https://github.com/ccurtin/vagrant-python-django/compare/).\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}